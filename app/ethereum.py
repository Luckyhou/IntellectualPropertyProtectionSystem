from time import sleep
import json
from web3 import Web3, KeepAliveRPCProvider, contract

web3 = Web3(KeepAliveRPCProvider(host='localhost', port='8545'))
eth = web3.eth

contract_data = {
    'abi': json.loads('[{"constant":true,"inputs":[],"name":"getData","outputs":[{"name":"","type":"string"}],"payable":false,"type":"function"},{"constant":true,"inputs":[{"name":"","type":"bytes32"}],"name":"proofs","outputs":[{"name":"name","type":"string"},{"name":"description","type":"string"},{"name":"timestamp","type":"uint256"},{"name":"sender","type":"address"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"d","type":"string"}],"name":"setData","outputs":[],"payable":false,"type":"function"},{"constant":true,"inputs":[{"name":"hash","type":"bytes32"}],"name":"getProofDescription","outputs":[{"name":"","type":"string"}],"payable":false,"type":"function"},{"constant":true,"inputs":[{"name":"a","type":"int256"},{"name":"b","type":"int256"}],"name":"add","outputs":[{"name":"","type":"int256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"hash","type":"bytes32"},{"name":"name","type":"string"},{"name":"description","type":"string"}],"name":"proof","outputs":[],"payable":false,"type":"function"},{"constant":true,"inputs":[{"name":"hash","type":"bytes32"}],"name":"getProofSender","outputs":[{"name":"","type":"address"}],"payable":false,"type":"function"},{"constant":true,"inputs":[{"name":"hash","type":"bytes32"}],"name":"getProofName","outputs":[{"name":"","type":"string"}],"payable":false,"type":"function"},{"constant":true,"inputs":[{"name":"hash","type":"bytes32"}],"name":"getProofTimestamp","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}]'),
    'code': '6060604052341561000c57fe5b5b610b658061001c6000396000f30060606040523615610097576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680633bc5de3014610099578063444d95b01461013257806347064d6a146102af5780637213e70614610309578063a5f3c23b146103b4578063b03225ea146103f1578063be59b5c51461049b578063eceddd4d146104ff578063fb49802d146105aa575bfe5b34156100a157fe5b6100a96105e2565b60405180806020018281038252838181518152602001915080519060200190808383600083146100f8575b8051825260208311156100f8576020820191506020810190506020830392506100d4565b505050905090810190601f1680156101245780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561013a57fe5b61015460048080356000191690602001909190505061068b565b6040518080602001806020018581526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018381038352878181546001816001161561010002031660029004815260200191508054600181600116156101000203166002900480156102195780601f106101ee57610100808354040283529160200191610219565b820191906000526020600020905b8154815290600101906020018083116101fc57829003601f168201915b505083810382528681815460018160011615610100020316600290048152602001915080546001816001161561010002031660029004801561029c5780601f106102715761010080835404028352916020019161029c565b820191906000526020600020905b81548152906001019060200180831161027f57829003601f168201915b5050965050505050505060405180910390f35b34156102b757fe5b610307600480803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919050506106d9565b005b341561031157fe5b61032b6004808035600019169060200190919050506106f4565b604051808060200182810382528381815181526020019150805190602001908083836000831461037a575b80518252602083111561037a57602082019150602081019050602083039250610356565b505050905090810190601f1680156103a65780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156103bc57fe5b6103db60048080359060200190919080359060200190919050506107bb565b6040518082815260200191505060405180910390f35b34156103f957fe5b61049960048080356000191690602001909190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919050506107c9565b005b34156104a357fe5b6104bd6004808035600019169060200190919050506108c7565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561050757fe5b610521600480803560001916906020019091905050610910565b6040518080602001828103825283818151815260200191508051906020019080838360008314610570575b8051825260208311156105705760208201915060208101905060208303925061054c565b505050905090810190601f16801561059c5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156105b257fe5b6105cc6004808035600019169060200190919050506109d7565b6040518082815260200191505060405180910390f35b6105ea610a00565b60018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156106805780601f1061065557610100808354040283529160200191610680565b820191906000526020600020905b81548152906001019060200180831161066357829003601f168201915b505050505090505b90565b6000602052806000526040600020600091509050806000019080600101908060020154908060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905084565b80600190805190602001906106ef929190610a14565b505b50565b6106fc610a00565b6000600083600019166000191681526020019081526020016000206001018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156107ae5780601f10610783576101008083540402835291602001916107ae565b820191906000526020600020905b81548152906001019060200180831161079157829003601f168201915b505050505090505b919050565b600081830190505b92915050565b60006107d4846109d7565b11156107e05760006000fd5b6080604051908101604052808381526020018281526020014281526020013273ffffffffffffffffffffffffffffffffffffffff16815250600060008560001916600019168152602001908152602001600020600082015181600001908051906020019061084f929190610a94565b50602082015181600101908051906020019061086c929190610a94565b506040820151816002015560608201518160030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509050505b505050565b600060006000836000191660001916815260200190815260200160002060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690505b919050565b610918610a00565b6000600083600019166000191681526020019081526020016000206000018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156109ca5780601f1061099f576101008083540402835291602001916109ca565b820191906000526020600020905b8154815290600101906020018083116109ad57829003601f168201915b505050505090505b919050565b60006000600083600019166000191681526020019081526020016000206002015490505b919050565b602060405190810160405280600081525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10610a5557805160ff1916838001178555610a83565b82800160010185558215610a83579182015b82811115610a82578251825591602001919060010190610a67565b5b509050610a909190610b14565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10610ad557805160ff1916838001178555610b03565b82800160010185558215610b03579182015b82811115610b02578251825591602001919060010190610ae7565b5b509050610b109190610b14565b5090565b610b3691905b80821115610b32576000816000905550600101610b1a565b5090565b905600a165627a7a72305820d901e5915d6e014e851afa61e144b8e6405fdebdf3a525777c170f005553d5d80029',
    # 'code_runtime': '0x...',
    # 'source': 'contract Token {.....}',
}

MyContract = contract.Contract.factory(web3, contract_name='MyContract', abi=contract_data['abi'], bytecode=contract_data['code'])


def submit_file(file):
    address = "0x0b02516fdb53cd5f06547d5dda0b0bfe8d0ba1c6"
    my_contract = contract.Contract.factory(web3, contract_name='MyContract', abi=contract_data['abi'], address=address)
    return my_contract.transact().proof(file.hash, file.filename, file.description)


def traversal_all_contract():
    for i in range(0, eth.blockNumber + 1):
        if eth.getBlockTransactionCount(i) > 0:
            block = eth.getBlock(i)
            for transaction in block['transactions']:
                contractAddress = eth.getTransactionReceipt(transaction)['contractAddress']
                print(i, block['hash'], transaction, contractAddress)


def deploy_contract():
    return MyContract.deploy()


def load_contract(address):
    print('contract:', address)
    # contract_factory = contract.construct_contract_factory(web3, contract_data['abi'])
    # my_contract = contract_factory(address=address)
    my_contract = contract.Contract.factory(web3, contract_name='MyContract', abi=contract_data['abi'], address=address)
    result = my_contract.call().add(1, 2)
    print('add result:', result)

    print('proof timestamp:', my_contract.call().getProofName("aaa"))

    gas_limit = int(eth.getBlock('latest')['gasLimit'])
    tx = my_contract.transact().proof("aaaa", "bb", "cc")
    # tx = my_contract.transact({'gas': int(gas_limit*0.9)}).proof("aaaa", "bb", "cc")
    print(tx)

    while True:
        receipt = eth.getTransactionReceipt(tx)
        if receipt is not None:
            break
        sleep(1)
    print('receipt:', receipt)

    from datetime import datetime

    now = datetime.now()
    print(now)
    new_data = str(now)
    print('try to set new data:', new_data)
    tx_list = []
    for i in range(10):
        tx = my_contract.transact().setData(new_data)
        # tx = my_contract.transact({'gas': 210000}).setData(new_data)
        tx_list.append(tx)
        print('tx hash:', tx)
    while len(tx_list) > 0:
        for tx in tx_list:
            receipt = eth.getTransactionReceipt(tx)
            if receipt is not None:
                tx_list.remove(tx)
                # print('tx receive:', receipt)
                print('tx %s receipt: blockNumber: %s, transactionIndex: %s' % (tx, receipt['blockNumber'], receipt['transactionIndex']))
        data = my_contract.call().getData()
        print('contract data:', data)

        if len(tx_list) > 0:
            sleep(2)
    print(datetime.now())


def test_deploy():
    tx_hash = deploy_contract()
    print('tx_hash:', tx_hash)
    while True:
        receipt = eth.getTransactionReceipt(tx_hash)
        if receipt is not None:
            break
    print('receipt:', receipt)
    print('contract:', receipt['contractAddress'])


if __name__ == '__main__':
    print('blockNum', eth.blockNumber)

    # unlock
    print('unlock', web3.personal.unlockAccount(eth.coinbase, '4869'), 0)

    # traversal_all_contract()

    # test_deploy()

    load_contract("0x0b02516fdb53cd5f06547d5dda0b0bfe8d0ba1c6")
