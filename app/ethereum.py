from time import sleep
import json
from web3 import Web3, KeepAliveRPCProvider, contract

web3 = Web3(KeepAliveRPCProvider(host='localhost', port='8545'))
eth = web3.eth


def submit_file(file):
    # TODO
    return 'TODO_the_ethereum_tx'


def traversal_all_contract():
    for i in range(0, eth.blockNumber + 1):
        if eth.getBlockTransactionCount(i) > 0:
            block = eth.getBlock(i)
            for transaction in block['transactions']:
                contractAddress = eth.getTransactionReceipt(transaction)['contractAddress']
                print(i, block['hash'], transaction, contractAddress)


contract_data = {
    'abi': json.loads('[{"constant":true,"inputs":[{"name":"","type":"bytes32"}],"name":"proofs","outputs":[{"name":"name","type":"string"},{"name":"description","type":"string"},{"name":"timestamp","type":"uint256"},{"name":"sender","type":"address"}],"payable":false,"type":"function"},{"constant":true,"inputs":[{"name":"hash","type":"bytes32"}],"name":"getProofDescription","outputs":[{"name":"","type":"string"}],"payable":false,"type":"function"},{"constant":true,"inputs":[{"name":"a","type":"int256"},{"name":"b","type":"int256"}],"name":"add","outputs":[{"name":"","type":"int256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"hash","type":"bytes32"},{"name":"name","type":"string"},{"name":"description","type":"string"}],"name":"proof","outputs":[],"payable":false,"type":"function"},{"constant":true,"inputs":[{"name":"hash","type":"bytes32"}],"name":"getProofSender","outputs":[{"name":"","type":"address"}],"payable":false,"type":"function"},{"constant":true,"inputs":[{"name":"hash","type":"bytes32"}],"name":"getProofName","outputs":[{"name":"","type":"string"}],"payable":false,"type":"function"},{"constant":true,"inputs":[{"name":"hash","type":"bytes32"}],"name":"getProofTimestamp","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"inputs":[],"payable":false,"type":"constructor"}]'),
    'code': '0x6060604052341561000c57fe5b5b5b5b6109188061001e6000396000f30060606040523615610081576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063444d95b0146100835780637213e70614610200578063a5f3c23b146102ab578063b03225ea146102e8578063be59b5c514610392578063eceddd4d146103f6578063fb49802d146104a1575bfe5b341561008b57fe5b6100a56004808035600019169060200190919050506104d9565b6040518080602001806020018581526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200183810383528781815460018160011615610100020316600290048152602001915080546001816001161561010002031660029004801561016a5780601f1061013f5761010080835404028352916020019161016a565b820191906000526020600020905b81548152906001019060200180831161014d57829003601f168201915b50508381038252868181546001816001161561010002031660029004815260200191508054600181600116156101000203166002900480156101ed5780601f106101c2576101008083540402835291602001916101ed565b820191906000526020600020905b8154815290600101906020018083116101d057829003601f168201915b5050965050505050505060405180910390f35b341561020857fe5b610222600480803560001916906020019091905050610527565b6040518080602001828103825283818151815260200191508051906020019080838360008314610271575b8051825260208311156102715760208201915060208101905060208303925061024d565b505050905090810190601f16801561029d5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156102b357fe5b6102d260048080359060200190919080359060200190919050506105ee565b6040518082815260200191505060405180910390f35b34156102f057fe5b61039060048080356000191690602001909190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919050506105fc565b005b341561039a57fe5b6103b46004808035600019169060200190919050506106fa565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156103fe57fe5b610418600480803560001916906020019091905050610743565b6040518080602001828103825283818151815260200191508051906020019080838360008314610467575b80518252602083111561046757602082019150602081019050602083039250610443565b505050905090810190601f1680156104935780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156104a957fe5b6104c360048080356000191690602001909190505061080a565b6040518082815260200191505060405180910390f35b6000602052806000526040600020600091509050806000019080600101908060020154908060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905084565b61052f610833565b6000600083600019166000191681526020019081526020016000206001018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156105e15780601f106105b6576101008083540402835291602001916105e1565b820191906000526020600020905b8154815290600101906020018083116105c457829003601f168201915b505050505090505b919050565b600081830190505b92915050565b60006106078461080a565b11156106135760006000fd5b6080604051908101604052808381526020018281526020014281526020013273ffffffffffffffffffffffffffffffffffffffff168152506000600085600019166000191681526020019081526020016000206000820151816000019080519060200190610682929190610847565b50602082015181600101908051906020019061069f929190610847565b506040820151816002015560608201518160030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509050505b505050565b600060006000836000191660001916815260200190815260200160002060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690505b919050565b61074b610833565b6000600083600019166000191681526020019081526020016000206000018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156107fd5780601f106107d2576101008083540402835291602001916107fd565b820191906000526020600020905b8154815290600101906020018083116107e057829003601f168201915b505050505090505b919050565b60006000600083600019166000191681526020019081526020016000206002015490505b919050565b602060405190810160405280600081525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061088857805160ff19168380011785556108b6565b828001600101855582156108b6579182015b828111156108b557825182559160200191906001019061089a565b5b5090506108c391906108c7565b5090565b6108e991905b808211156108e55760008160009055506001016108cd565b5090565b905600a165627a7a72305820eb38dab1f25228f9171e3a3935c1a582eba707d735d0249c82594d399608ad9c0029',
    # 'code_runtime': '0x...',
    # 'source': 'contract Token {.....}',
}

MyContract = contract.Contract.factory(web3, contract_name='MyContract', abi=contract_data['abi'], bytecode=contract_data['code'])


def deploy_contract():
    return MyContract.deploy()


def load_contract(address):
    contract_factory = contract.construct_contract_factory(web3, contract_data['abi'])
    my_contract = contract_factory(address=address)
    result = my_contract.call().add(1, 2)
    print(result)

    print(my_contract.call().getProofTimestamp("aa"))

    print(web3.personal.unlockAccount(eth.coinbase, '4869'))
    # print(my_contract.transact().proof("aaa", "bb", "cc"))

    from datetime import datetime
    print(datetime.now())
    new_data = "test4"
    print(my_contract.transact().setData(new_data))
    print(my_contract.transact().setData(new_data))
    print(my_contract.transact().setData(new_data))
    print(my_contract.transact().setData(new_data))
    print(my_contract.transact().setData(new_data))
    while True:
        data = my_contract.call().getData()
        print(data)
        if data == new_data:
            break
        sleep(2)
    print(datetime.now())


if __name__ == '__main__':
    print(eth.blockNumber)

    # unlock
    print(web3.personal.unlockAccount(eth.coinbase, '4869'), 0)

    # traversal_all_contract()

    tx_hash = deploy_contract()
    print(tx_hash)
    while True:
        receipt = eth.getTransactionReceipt(tx_hash)
        if receipt is not None:
            break
    print(receipt)

    # load_contract("0xd6b38575df44e72861237b3c127894bc90892b98")
